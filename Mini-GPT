{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jahanvi513/Mini-GPT/blob/main/Mini-GPT\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install tiktoken"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VQ78UWAiHlr1",
        "outputId": "f89cc334-97fa-442b-c344-7d6be4427ecc",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tiktoken in /usr/local/lib/python3.11/dist-packages (0.9.0)\n",
            "Requirement already satisfied: regex>=2022.1.18 in /usr/local/lib/python3.11/dist-packages (from tiktoken) (2024.11.6)\n",
            "Requirement already satisfied: requests>=2.26.0 in /usr/local/lib/python3.11/dist-packages (from tiktoken) (2.32.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.26.0->tiktoken) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.26.0->tiktoken) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.26.0->tiktoken) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.26.0->tiktoken) (2025.1.31)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tiktoken\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.utils.data import Dataset, DataLoader"
      ],
      "metadata": {
        "id": "g-3QBhLyYwb8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "device"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tUelU1WSwqen",
        "outputId": "12c4189e-048d-4aa8-8473-83ed16114601"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "device(type='cuda')"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZZijlFjlCFFM",
        "collapsed": true
      },
      "outputs": [],
      "source": [
        "class GPTDatasetV1(Dataset):\n",
        "    def __init__(self, txt, tokenizer, max_length, stride):\n",
        "        self.input_ids = []\n",
        "        self.target_ids = []\n",
        "\n",
        "        token_ids = tokenizer.encode(txt, allowed_special={\"<|endoftext|>\"})\n",
        "\n",
        "        for i in range(0, len(token_ids) - max_length, stride):\n",
        "            input_chunk = token_ids[i:i + max_length]\n",
        "            target_chunk = token_ids[i + 1: i + max_length + 1]\n",
        "            self.input_ids.append(torch.tensor(input_chunk))\n",
        "            self.target_ids.append(torch.tensor(target_chunk))\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.input_ids)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        return self.input_ids[idx], self.target_ids[idx]\n",
        "\n",
        "\n",
        "def create_dataloader_v1(txt, batch_size=10, max_length=256,\n",
        "                         stride=128, shuffle=True, drop_last=True, num_workers=0):\n",
        "\n",
        "    tokenizer = tiktoken.get_encoding(\"gpt2\")\n",
        "    dataset = GPTDatasetV1(txt, tokenizer, max_length, stride)\n",
        "    dataloader = DataLoader(\n",
        "        dataset, batch_size=batch_size, shuffle=shuffle, drop_last=drop_last, num_workers=num_workers)\n",
        "\n",
        "    return dataloader\n",
        "\n",
        "class MultiHeadAttention(nn.Module):\n",
        "    def __init__(self, d_in, d_out, context_length, dropout, num_heads, qkv_bias=False):\n",
        "        super().__init__()\n",
        "        assert d_out % num_heads == 0, \"d_out must be divisible by n_heads\"\n",
        "\n",
        "        self.d_out = d_out\n",
        "        self.num_heads = num_heads\n",
        "        self.head_dim = d_out // num_heads\n",
        "\n",
        "        self.W_query = nn.Linear(d_in, d_out, bias=qkv_bias)\n",
        "        self.W_key = nn.Linear(d_in, d_out, bias=qkv_bias)\n",
        "        self.W_value = nn.Linear(d_in, d_out, bias=qkv_bias)\n",
        "\n",
        "        self.out_proj = nn.Linear(d_out, d_out)\n",
        "        self.dropout = nn.Dropout(dropout)\n",
        "        self.register_buffer('mask', torch.triu(torch.ones(context_length, context_length), diagonal=1))\n",
        "\n",
        "    def forward(self, x):\n",
        "        b, num_tokens, d_in = x.shape\n",
        "\n",
        "        keys = self.W_key(x)\n",
        "        queries = self.W_query(x)\n",
        "        values = self.W_value(x)\n",
        "\n",
        "        keys = keys.view(b, num_tokens, self.num_heads, self.head_dim)\n",
        "        values = values.view(b, num_tokens, self.num_heads, self.head_dim)\n",
        "        queries = queries.view(b, num_tokens, self.num_heads, self.head_dim)\n",
        "\n",
        "        keys = keys.transpose(1, 2)\n",
        "        queries = queries.transpose(1, 2)\n",
        "        values = values.transpose(1, 2)\n",
        "\n",
        "        attn_scores = queries @ keys.transpose(2, 3)\n",
        "\n",
        "        mask_bool = self.mask.bool()[:num_tokens, :num_tokens]\n",
        "\n",
        "        attn_scores.masked_fill_(mask_bool, -torch.inf)\n",
        "\n",
        "        attn_weights = torch.softmax(attn_scores / keys.shape[-1]**0.5, dim=-1)\n",
        "        attn_weights = self.dropout(attn_weights)\n",
        "\n",
        "        context_vec = (attn_weights @ values).transpose(1, 2)\n",
        "        context_vec = context_vec.reshape(b, num_tokens, self.d_out)\n",
        "        context_vec = self.out_proj(context_vec)\n",
        "\n",
        "        return context_vec\n",
        "\n",
        "class LayerNorm(nn.Module):\n",
        "    def __init__(self, emb_dim):\n",
        "        super().__init__()\n",
        "        self.eps = 1e-5\n",
        "        self.scale = nn.Parameter(torch.ones(emb_dim))\n",
        "        self.shift = nn.Parameter(torch.zeros(emb_dim))\n",
        "\n",
        "    def forward(self, x):\n",
        "        mean = x.mean(dim=-1, keepdim=True)\n",
        "        var = x.var(dim=-1, keepdim=True, unbiased=False)\n",
        "        norm_x = (x - mean) / torch.sqrt(var + self.eps)\n",
        "        return self.scale * norm_x + self.shift\n",
        "\n",
        "\n",
        "class GELU(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "\n",
        "    def forward(self, x):\n",
        "        return 0.5 * x * (1 + torch.tanh(\n",
        "            torch.sqrt(torch.tensor(2.0 / torch.pi)) *\n",
        "            (x + 0.044715 * torch.pow(x, 3))\n",
        "        ))\n",
        "\n",
        "\n",
        "class FeedForward(nn.Module):\n",
        "    def __init__(self, cfg):\n",
        "        super().__init__()\n",
        "        self.layers = nn.Sequential(\n",
        "            nn.Linear(cfg[\"emb_dim\"], 4 * cfg[\"emb_dim\"]),\n",
        "            GELU(),\n",
        "            nn.Linear(4 * cfg[\"emb_dim\"], cfg[\"emb_dim\"]),\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.layers(x)\n",
        "\n",
        "\n",
        "class TransformerBlock(nn.Module):\n",
        "    def __init__(self, cfg):\n",
        "        super().__init__()\n",
        "        self.att = MultiHeadAttention(\n",
        "            d_in=cfg[\"emb_dim\"],\n",
        "            d_out=cfg[\"emb_dim\"],\n",
        "            context_length=cfg[\"context_length\"],\n",
        "            num_heads=cfg[\"n_heads\"],\n",
        "            dropout=cfg[\"drop_rate\"],\n",
        "            qkv_bias=cfg[\"qkv_bias\"])\n",
        "        self.ff = FeedForward(cfg)\n",
        "        self.norm1 = LayerNorm(cfg[\"emb_dim\"])\n",
        "        self.norm2 = LayerNorm(cfg[\"emb_dim\"])\n",
        "        self.drop_shortcut = nn.Dropout(cfg[\"drop_rate\"])\n",
        "\n",
        "    def forward(self, x):\n",
        "        shortcut = x\n",
        "        x = self.norm1(x)\n",
        "        x = self.att(x)\n",
        "        x = self.drop_shortcut(x)\n",
        "        x = x + shortcut\n",
        "\n",
        "        shortcut = x\n",
        "        x = self.norm2(x)\n",
        "        x = self.ff(x)\n",
        "        x = self.drop_shortcut(x)\n",
        "        x = x + shortcut\n",
        "        return x\n",
        "\n",
        "\n",
        "class GPTModel(nn.Module):\n",
        "    def __init__(self, cfg):\n",
        "        super().__init__()\n",
        "        self.tok_emb = nn.Embedding(cfg[\"vocab_size\"], cfg[\"emb_dim\"])\n",
        "        self.pos_emb = nn.Embedding(cfg[\"context_length\"], cfg[\"emb_dim\"])\n",
        "        self.drop_emb = nn.Dropout(cfg[\"drop_rate\"])\n",
        "\n",
        "        self.trf_blocks = nn.Sequential(\n",
        "            *[TransformerBlock(cfg) for _ in range(cfg[\"n_layers\"])])\n",
        "\n",
        "        self.final_norm = LayerNorm(cfg[\"emb_dim\"])\n",
        "        self.out_head = nn.Linear(cfg[\"emb_dim\"], cfg[\"vocab_size\"], bias=False)\n",
        "\n",
        "    def forward(self, in_idx):\n",
        "        batch_size, seq_len = in_idx.shape\n",
        "        tok_embeds = self.tok_emb(in_idx)\n",
        "        pos_embeds = self.pos_emb(torch.arange(seq_len, device=in_idx.device))\n",
        "        x = tok_embeds + pos_embeds\n",
        "        x = self.drop_emb(x)\n",
        "        x = self.trf_blocks(x)\n",
        "        x = self.final_norm(x)\n",
        "        logits = self.out_head(x)\n",
        "        return logits\n",
        "\n",
        "\n",
        "def generate_text_simple(model, idx, max_new_tokens, context_size):\n",
        "    for _ in range(max_new_tokens):\n",
        "        idx_cond = idx[:, -context_size:]\n",
        "        with torch.no_grad():\n",
        "            logits = model(idx_cond)\n",
        "\n",
        "        logits = logits[:, -1, :]\n",
        "        idx_next = torch.argmax(logits, dim=-1, keepdim=True)\n",
        "        idx = torch.cat((idx, idx_next), dim=1)\n",
        "    return idx\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "\n",
        "    GPT_CONFIG_124M = {\n",
        "        \"vocab_size\": 50257,     # Vocabulary size\n",
        "        \"context_length\": 256,  # Context length\n",
        "        \"emb_dim\": 768,          # Embedding dimension\n",
        "        \"n_heads\": 12,           # Number of attention heads\n",
        "        \"n_layers\": 12,          # Number of layers\n",
        "        \"drop_rate\": 0.1,        # Dropout rate\n",
        "        \"qkv_bias\": False        # Query-Key-Value bias\n",
        "    }\n",
        "\n",
        "    torch.manual_seed(123)\n",
        "    model = GPTModel(GPT_CONFIG_124M)\n",
        "    model.eval()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import urllib.request\n",
        "\n",
        "file_path = \"eBook-Pride-and-Prejudice.txt\"\n",
        "url = \"https://raw.githubusercontent.com/jahanvi513/Pytorch/main/Project/eBook-Pride-and-Prejudice\"\n",
        "\n",
        "if not os.path.exists(file_path):\n",
        "    with urllib.request.urlopen(url) as response:\n",
        "        text_data = response.read().decode('utf-8')\n",
        "    with open(file_path, \"w\", encoding=\"utf-8\") as file:\n",
        "        file.write(text_data)\n",
        "else:\n",
        "    with open(file_path, \"r\", encoding=\"utf-8\") as file:\n",
        "        text_data = file.read()\n",
        "print(\"Total number of characters:\", len(text_data))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "50-p5lBpSRSr",
        "outputId": "dc28f61e-c6a8-4d13-f40b-5e548d4eec70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total number of characters: 748124\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tiktoken\n",
        "\n",
        "def text_to_token_ids(text, tokenizer):\n",
        "    encoded = tokenizer.encode(text, allowed_special={'<|endoftext|>'})\n",
        "    encoded_tensor = torch.tensor(encoded).unsqueeze(0)\n",
        "    return encoded_tensor\n",
        "\n",
        "def token_ids_to_text(token_ids, tokenizer):\n",
        "    flat = token_ids.squeeze(0) # remove batch dimension\n",
        "    return tokenizer.decode(flat.tolist())\n"
      ],
      "metadata": {
        "id": "QNYCrXpFXfM4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tiktoken\n",
        "tokenizer = tiktoken.get_encoding(\"gpt2\")\n",
        "\n",
        "\n",
        "# Train/validation ratio\n",
        "train_ratio = 0.90\n",
        "split_idx = int(train_ratio * len(text_data))\n",
        "train_data = text_data[:split_idx]\n",
        "val_data = text_data[split_idx:]\n",
        "\n",
        "\n",
        "torch.manual_seed(123)\n",
        "\n",
        "train_loader = create_dataloader_v1(\n",
        "    train_data,\n",
        "    batch_size=10,\n",
        "    max_length=GPT_CONFIG_124M[\"context_length\"],\n",
        "    stride= GPT_CONFIG_124M[\"context_length\"],\n",
        "    drop_last=True,\n",
        "    shuffle=True,\n",
        "    num_workers=0\n",
        ")\n",
        "\n",
        "val_loader = create_dataloader_v1(\n",
        "    val_data,\n",
        "    batch_size=10,\n",
        "    max_length=GPT_CONFIG_124M[\"context_length\"],\n",
        "    stride=GPT_CONFIG_124M[\"context_length\"],\n",
        "    drop_last=False,\n",
        "    shuffle=False,\n",
        "    num_workers=0\n",
        ")"
      ],
      "metadata": {
        "id": "Adc3QTukXnps"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calc_loss_batch(input_batch, target_batch, model, device):\n",
        "    input_batch, target_batch = input_batch.to(device), target_batch.to(device)\n",
        "    logits = model(input_batch)\n",
        "    loss = torch.nn.functional.cross_entropy(logits.flatten(0, 1), target_batch.flatten())\n",
        "    return loss"
      ],
      "metadata": {
        "id": "Qu0n7lXxX3XK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calc_loss_loader(data_loader, model, device, num_batches=None):\n",
        "    total_loss = 0.\n",
        "    if len(data_loader) == 0:\n",
        "        return float(\"nan\")\n",
        "    elif num_batches is None:\n",
        "        num_batches = len(data_loader)\n",
        "    else:\n",
        "        num_batches = min(num_batches, len(data_loader))\n",
        "    for i, (input_batch, target_batch) in enumerate(data_loader):\n",
        "        if i < num_batches:\n",
        "            loss = calc_loss_batch(input_batch, target_batch, model, device)\n",
        "            total_loss += loss.item()\n",
        "        else:\n",
        "            break\n",
        "    return total_loss / num_batches"
      ],
      "metadata": {
        "id": "xhdH9a7qX5Pt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def train_model_simple(model, train_loader, val_loader, optimizer, device, num_epochs,\n",
        "                       eval_freq, eval_iter, start_context, tokenizer):\n",
        "\n",
        "    train_losses, val_losses, track_tokens_seen = [], [], []\n",
        "    tokens_seen, global_step = 0, -1\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        model.train()\n",
        "        for input_batch, target_batch in train_loader:\n",
        "            optimizer.zero_grad()\n",
        "            loss = calc_loss_batch(input_batch, target_batch, model, device)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "            tokens_seen += input_batch.numel()\n",
        "            global_step += 1\n",
        "\n",
        "            if global_step % eval_freq == 0:\n",
        "                train_loss, val_loss = evaluate_model(\n",
        "                    model, train_loader, val_loader, device, eval_iter)\n",
        "                train_losses.append(train_loss)\n",
        "                val_losses.append(val_loss)\n",
        "                track_tokens_seen.append(tokens_seen)\n",
        "                print(f\"Ep {epoch+1} (Step {global_step:06d}): \"\n",
        "                      f\"Train loss {train_loss:.3f}, Val loss {val_loss:.3f}\")\n",
        "\n",
        "        generate_and_print_sample(\n",
        "            model, tokenizer, device, start_context\n",
        "        )\n",
        "\n",
        "    return train_losses, val_losses, track_tokens_seen\n",
        "\n",
        "def evaluate_model(model, train_loader, val_loader, device, eval_iter):\n",
        "    model.eval()\n",
        "    with torch.no_grad():\n",
        "        train_loss = calc_loss_loader(train_loader, model, device, num_batches=eval_iter)\n",
        "        val_loss = calc_loss_loader(val_loader, model, device, num_batches=eval_iter)\n",
        "    model.train()\n",
        "    return train_loss, val_loss\n",
        "\n",
        "def generate_and_print_sample(model, tokenizer, device, start_context):\n",
        "    model.eval()\n",
        "    context_size = model.pos_emb.weight.shape[0]\n",
        "    encoded = text_to_token_ids(start_context, tokenizer).to(device)\n",
        "    with torch.no_grad():\n",
        "        token_ids = generate_text_simple(\n",
        "            model=model, idx=encoded,\n",
        "            max_new_tokens=50, context_size=context_size\n",
        "        )\n",
        "    decoded_text = token_ids_to_text(token_ids, tokenizer)\n",
        "    print(decoded_text.replace(\"\\n\", \" \"))\n",
        "    model.train()"
      ],
      "metadata": {
        "id": "p24zDDCKX7kB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "torch.manual_seed(123)\n",
        "model = GPTModel(GPT_CONFIG_124M)\n",
        "model.to(device)\n",
        "optimizer = torch.optim.AdamW(model.parameters(), lr=0.00005, weight_decay=0.1)"
      ],
      "metadata": {
        "id": "jub1qGBFYDh9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_epochs = 10\n",
        "train_losses, val_losses, tokens_seen = train_model_simple(\n",
        "    model, train_loader, val_loader, optimizer, device,\n",
        "    num_epochs=num_epochs, eval_freq=5, eval_iter=5,\n",
        "    start_context=\"Till this moment I never knew myself.\", tokenizer=tokenizer\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Ht4zkQ_YMaM",
        "outputId": "9e35c266-b12c-4e57-c2ed-76e2094aa381"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ep 1 (Step 000000): Train loss 10.645, Val loss 10.640\n",
            "Ep 1 (Step 000005): Train loss 9.350, Val loss 9.413\n",
            "Ep 1 (Step 000010): Train loss 8.547, Val loss 9.004\n",
            "Ep 1 (Step 000015): Train loss 8.678, Val loss 8.703\n",
            "Ep 1 (Step 000020): Train loss 8.034, Val loss 8.430\n",
            "Ep 1 (Step 000025): Train loss 7.772, Val loss 8.175\n",
            "Ep 1 (Step 000030): Train loss 7.860, Val loss 7.928\n",
            "Ep 1 (Step 000035): Train loss 7.534, Val loss 7.695\n",
            "Ep 1 (Step 000040): Train loss 7.393, Val loss 7.467\n",
            "Ep 1 (Step 000045): Train loss 7.028, Val loss 7.248\n",
            "Ep 1 (Step 000050): Train loss 6.954, Val loss 7.053\n",
            "Ep 1 (Step 000055): Train loss 6.592, Val loss 6.888\n",
            "Ep 1 (Step 000060): Train loss 6.592, Val loss 6.740\n",
            "Ep 1 (Step 000065): Train loss 6.449, Val loss 6.612\n",
            "Till this moment I never knew myself.   ”  ” “ “, and ” “, and “ “, and “, and “ “, and “,\n",
            "Ep 2 (Step 000070): Train loss 6.394, Val loss 6.495\n",
            "Ep 2 (Step 000075): Train loss 6.095, Val loss 6.395\n",
            "Ep 2 (Step 000080): Train loss 6.050, Val loss 6.312\n",
            "Ep 2 (Step 000085): Train loss 6.079, Val loss 6.235\n",
            "Ep 2 (Step 000090): Train loss 5.955, Val loss 6.168\n",
            "Ep 2 (Step 000095): Train loss 5.858, Val loss 6.105\n",
            "Ep 2 (Step 000100): Train loss 5.879, Val loss 6.053\n",
            "Ep 2 (Step 000105): Train loss 5.717, Val loss 6.009\n",
            "Ep 2 (Step 000110): Train loss 5.446, Val loss 5.965\n",
            "Ep 2 (Step 000115): Train loss 5.727, Val loss 5.926\n",
            "Ep 2 (Step 000120): Train loss 5.650, Val loss 5.892\n",
            "Ep 2 (Step 000125): Train loss 5.684, Val loss 5.852\n",
            "Ep 2 (Step 000130): Train loss 5.697, Val loss 5.817\n",
            "Ep 2 (Step 000135): Train loss 5.674, Val loss 5.788\n",
            "Till this moment I never knew myself.   ” “I.” ” “I,“I,” “I, and,” “I,” ” ” �\n",
            "Ep 3 (Step 000140): Train loss 5.411, Val loss 5.759\n",
            "Ep 3 (Step 000145): Train loss 5.660, Val loss 5.732\n",
            "Ep 3 (Step 000150): Train loss 5.426, Val loss 5.710\n",
            "Ep 3 (Step 000155): Train loss 5.593, Val loss 5.687\n",
            "Ep 3 (Step 000160): Train loss 5.495, Val loss 5.664\n",
            "Ep 3 (Step 000165): Train loss 5.490, Val loss 5.641\n",
            "Ep 3 (Step 000170): Train loss 5.389, Val loss 5.619\n",
            "Ep 3 (Step 000175): Train loss 5.269, Val loss 5.598\n",
            "Ep 3 (Step 000180): Train loss 5.243, Val loss 5.569\n",
            "Ep 3 (Step 000185): Train loss 5.326, Val loss 5.555\n",
            "Ep 3 (Step 000190): Train loss 5.259, Val loss 5.534\n",
            "Ep 3 (Step 000195): Train loss 5.281, Val loss 5.518\n",
            "Ep 3 (Step 000200): Train loss 5.273, Val loss 5.498\n",
            "Ep 3 (Step 000205): Train loss 5.242, Val loss 5.476\n",
            "Till this moment I never knew myself.  ” ” “I have been.” “I am not be  “I have been to be in the ” “I have been.“I have been.\n",
            "Ep 4 (Step 000210): Train loss 5.259, Val loss 5.463\n",
            "Ep 4 (Step 000215): Train loss 5.231, Val loss 5.450\n",
            "Ep 4 (Step 000220): Train loss 5.301, Val loss 5.428\n",
            "Ep 4 (Step 000225): Train loss 5.059, Val loss 5.415\n",
            "Ep 4 (Step 000230): Train loss 5.156, Val loss 5.398\n",
            "Ep 4 (Step 000235): Train loss 5.095, Val loss 5.387\n",
            "Ep 4 (Step 000240): Train loss 5.088, Val loss 5.362\n",
            "Ep 4 (Step 000245): Train loss 5.263, Val loss 5.348\n",
            "Ep 4 (Step 000250): Train loss 4.951, Val loss 5.338\n",
            "Ep 4 (Step 000255): Train loss 5.036, Val loss 5.323\n",
            "Ep 4 (Step 000260): Train loss 4.895, Val loss 5.309\n",
            "Ep 4 (Step 000265): Train loss 4.928, Val loss 5.301\n",
            "Ep 4 (Step 000270): Train loss 4.940, Val loss 5.282\n",
            "Ep 4 (Step 000275): Train loss 5.058, Val loss 5.269\n",
            "Till this moment I never knew myself.  “I am not be a very much to be so much to be so much.” “I am not be a   “I am sure,“I am not be so,” said\n",
            "Ep 5 (Step 000280): Train loss 5.057, Val loss 5.259\n",
            "Ep 5 (Step 000285): Train loss 4.708, Val loss 5.252\n",
            "Ep 5 (Step 000290): Train loss 5.021, Val loss 5.240\n",
            "Ep 5 (Step 000295): Train loss 4.933, Val loss 5.233\n",
            "Ep 5 (Step 000300): Train loss 4.707, Val loss 5.216\n",
            "Ep 5 (Step 000305): Train loss 4.686, Val loss 5.210\n",
            "Ep 5 (Step 000310): Train loss 4.947, Val loss 5.200\n",
            "Ep 5 (Step 000315): Train loss 4.746, Val loss 5.187\n",
            "Ep 5 (Step 000320): Train loss 4.807, Val loss 5.175\n",
            "Ep 5 (Step 000325): Train loss 4.870, Val loss 5.173\n",
            "Ep 5 (Step 000330): Train loss 4.877, Val loss 5.153\n",
            "Ep 5 (Step 000335): Train loss 4.834, Val loss 5.142\n",
            "Ep 5 (Step 000340): Train loss 4.948, Val loss 5.143\n",
            "Till this moment I never knew myself. “I am sure, I am sure I am not be ” “I am sure,” “I am sure, I am sure, I am sure I am sure you will be ” \n",
            "Ep 6 (Step 000345): Train loss 4.659, Val loss 5.131\n",
            "Ep 6 (Step 000350): Train loss 4.741, Val loss 5.115\n",
            "Ep 6 (Step 000355): Train loss 4.806, Val loss 5.109\n",
            "Ep 6 (Step 000360): Train loss 4.841, Val loss 5.104\n",
            "Ep 6 (Step 000365): Train loss 4.634, Val loss 5.100\n",
            "Ep 6 (Step 000370): Train loss 4.336, Val loss 5.086\n",
            "Ep 6 (Step 000375): Train loss 4.538, Val loss 5.083\n",
            "Ep 6 (Step 000380): Train loss 4.646, Val loss 5.077\n",
            "Ep 6 (Step 000385): Train loss 4.685, Val loss 5.081\n",
            "Ep 6 (Step 000390): Train loss 4.517, Val loss 5.066\n",
            "Ep 6 (Step 000395): Train loss 4.385, Val loss 5.059\n",
            "Ep 6 (Step 000400): Train loss 4.615, Val loss 5.052\n",
            "Ep 6 (Step 000405): Train loss 4.656, Val loss 5.047\n",
            "Ep 6 (Step 000410): Train loss 4.371, Val loss 5.031\n",
            "Till this moment I never knew myself.”  “I am not be so much to be so much to be  “I am sure you.“I am not be a very ” said she is not be “I am sure you\n",
            "Ep 7 (Step 000415): Train loss 4.648, Val loss 5.024\n",
            "Ep 7 (Step 000420): Train loss 4.270, Val loss 5.021\n",
            "Ep 7 (Step 000425): Train loss 4.595, Val loss 5.020\n",
            "Ep 7 (Step 000430): Train loss 4.563, Val loss 5.006\n",
            "Ep 7 (Step 000435): Train loss 4.530, Val loss 4.999\n",
            "Ep 7 (Step 000440): Train loss 4.544, Val loss 4.992\n",
            "Ep 7 (Step 000445): Train loss 4.491, Val loss 4.993\n",
            "Ep 7 (Step 000450): Train loss 4.378, Val loss 4.990\n",
            "Ep 7 (Step 000455): Train loss 4.195, Val loss 4.982\n",
            "Ep 7 (Step 000460): Train loss 4.503, Val loss 4.976\n",
            "Ep 7 (Step 000465): Train loss 4.410, Val loss 4.970\n",
            "Ep 7 (Step 000470): Train loss 4.281, Val loss 4.963\n",
            "Ep 7 (Step 000475): Train loss 4.333, Val loss 4.958\n",
            "Ep 7 (Step 000480): Train loss 4.429, Val loss 4.953\n",
            "Till this moment I never knew myself.”  “I am not be so much to be “I amiable.” ” “I am not be a very much to be “I am not be so much as you have\n",
            "Ep 8 (Step 000485): Train loss 4.275, Val loss 4.951\n",
            "Ep 8 (Step 000490): Train loss 4.303, Val loss 4.936\n",
            "Ep 8 (Step 000495): Train loss 4.379, Val loss 4.942\n",
            "Ep 8 (Step 000500): Train loss 4.175, Val loss 4.935\n",
            "Ep 8 (Step 000505): Train loss 4.460, Val loss 4.935\n",
            "Ep 8 (Step 000510): Train loss 4.375, Val loss 4.926\n",
            "Ep 8 (Step 000515): Train loss 4.325, Val loss 4.917\n",
            "Ep 8 (Step 000520): Train loss 4.299, Val loss 4.922\n",
            "Ep 8 (Step 000525): Train loss 4.120, Val loss 4.913\n",
            "Ep 8 (Step 000530): Train loss 4.207, Val loss 4.907\n",
            "Ep 8 (Step 000535): Train loss 4.293, Val loss 4.899\n",
            "Ep 8 (Step 000540): Train loss 4.122, Val loss 4.907\n",
            "Ep 8 (Step 000545): Train loss 4.304, Val loss 4.901\n",
            "Ep 8 (Step 000550): Train loss 4.298, Val loss 4.893\n",
            "Till this moment I never knew myself.”  “I am sure you are not be so much “I am sure,” ” said Elizabeth, “I do not be “I do not be “I am sure,\n",
            "Ep 9 (Step 000555): Train loss 4.247, Val loss 4.886\n",
            "Ep 9 (Step 000560): Train loss 4.212, Val loss 4.894\n",
            "Ep 9 (Step 000565): Train loss 4.367, Val loss 4.899\n",
            "Ep 9 (Step 000570): Train loss 4.316, Val loss 4.887\n",
            "Ep 9 (Step 000575): Train loss 4.095, Val loss 4.893\n",
            "Ep 9 (Step 000580): Train loss 4.439, Val loss 4.895\n",
            "Ep 9 (Step 000585): Train loss 4.270, Val loss 4.876\n",
            "Ep 9 (Step 000590): Train loss 4.222, Val loss 4.875\n",
            "Ep 9 (Step 000595): Train loss 4.172, Val loss 4.875\n",
            "Ep 9 (Step 000600): Train loss 4.237, Val loss 4.870\n",
            "Ep 9 (Step 000605): Train loss 4.114, Val loss 4.854\n",
            "Ep 9 (Step 000610): Train loss 4.185, Val loss 4.859\n",
            "Ep 9 (Step 000615): Train loss 4.074, Val loss 4.846\n",
            "Ep 9 (Step 000620): Train loss 4.144, Val loss 4.838\n",
            "Till this moment I never knew myself.”  “I am sure you will not be so.” ”  “I am sure you will not be so much to be in the “I am sure you know,” �\n",
            "Ep 10 (Step 000625): Train loss 4.167, Val loss 4.841\n",
            "Ep 10 (Step 000630): Train loss 4.138, Val loss 4.846\n",
            "Ep 10 (Step 000635): Train loss 4.255, Val loss 4.850\n",
            "Ep 10 (Step 000640): Train loss 4.026, Val loss 4.841\n",
            "Ep 10 (Step 000645): Train loss 4.112, Val loss 4.834\n",
            "Ep 10 (Step 000650): Train loss 4.144, Val loss 4.832\n",
            "Ep 10 (Step 000655): Train loss 3.931, Val loss 4.844\n",
            "Ep 10 (Step 000660): Train loss 3.939, Val loss 4.843\n",
            "Ep 10 (Step 000665): Train loss 3.859, Val loss 4.826\n",
            "Ep 10 (Step 000670): Train loss 3.920, Val loss 4.827\n",
            "Ep 10 (Step 000675): Train loss 4.144, Val loss 4.826\n",
            "Ep 10 (Step 000680): Train loss 3.890, Val loss 4.825\n",
            "Ep 10 (Step 000685): Train loss 3.985, Val loss 4.819\n",
            "Till this moment I never knew myself.”  “I am not to be so,” said Elizabeth,”  “I am sure I do not be so much to be in the ” said Elizabeth, “I am sure, I\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.save(model.state_dict(), \"gpt2_model.pth\")"
      ],
      "metadata": {
        "id": "dWAopqZ-0E9C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Run the cell below to fetch the trained model from Google Drive and generate text"
      ],
      "metadata": {
        "id": "EpjLlpIk84t0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -U gdown\n",
        "!gdown --id 1zwHb869GtLypwjD11gxjbWFgqlap97Wg -O gpt_model.pth\n",
        "\n",
        "GPT_CONFIG_124M = {\n",
        "        \"vocab_size\": 50257,     # Vocabulary size\n",
        "        \"context_length\": 256,  # Context length\n",
        "        \"emb_dim\": 768,          # Embedding dimension\n",
        "        \"n_heads\": 12,           # Number of attention heads\n",
        "        \"n_layers\": 12,          # Number of layers\n",
        "        \"drop_rate\": 0.1,        # Dropout rate\n",
        "        \"qkv_bias\": False        # Query-Key-Value bias\n",
        "    }\n",
        "\n",
        "torch.manual_seed(123)\n",
        "model.load_state_dict(torch.load(\"gpt2_model.pth\", map_location=torch.device('cuda')))\n",
        "model.eval()\n",
        "\n",
        "train_losses, val_losses, tokens_seen = train_model_simple(\n",
        "    model, train_loader, val_loader, optimizer, device,\n",
        "    num_epochs=num_epochs, eval_freq=5, eval_iter=5,\n",
        "    start_context=\"Till this moment I never knew myself.\", tokenizer=tokenizer\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vXRybgqQ6fcL",
        "outputId": "0b69ed0b-409c-4b42-af29-7d6f0101e887"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gdown in /usr/local/lib/python3.11/dist-packages (5.2.0)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from gdown) (4.13.3)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from gdown) (3.18.0)\n",
            "Requirement already satisfied: requests[socks] in /usr/local/lib/python3.11/dist-packages (from gdown) (2.32.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from gdown) (4.67.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->gdown) (2.6)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->gdown) (4.13.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (2025.1.31)\n",
            "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (1.7.1)\n",
            "/usr/local/lib/python3.11/dist-packages/gdown/__main__.py:140: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n",
            "  warnings.warn(\n",
            "Downloading...\n",
            "From (original): https://drive.google.com/uc?id=1zwHb869GtLypwjD11gxjbWFgqlap97Wg\n",
            "From (redirected): https://drive.google.com/uc?id=1zwHb869GtLypwjD11gxjbWFgqlap97Wg&confirm=t&uuid=7e8ed6dd-c645-4f66-ab55-7aa6119a620d\n",
            "To: /content/gpt_model.pth\n",
            "100% 653M/653M [00:07<00:00, 91.6MB/s]\n",
            "Ep 1 (Step 000000): Train loss 4.058, Val loss 4.811\n",
            "Ep 1 (Step 000005): Train loss 4.017, Val loss 4.831\n",
            "Ep 1 (Step 000010): Train loss 3.876, Val loss 4.816\n",
            "Ep 1 (Step 000015): Train loss 3.958, Val loss 4.808\n",
            "Ep 1 (Step 000020): Train loss 4.046, Val loss 4.827\n",
            "Ep 1 (Step 000025): Train loss 3.995, Val loss 4.810\n",
            "Ep 1 (Step 000030): Train loss 3.806, Val loss 4.802\n",
            "Ep 1 (Step 000035): Train loss 3.841, Val loss 4.824\n",
            "Ep 1 (Step 000040): Train loss 3.839, Val loss 4.800\n",
            "Ep 1 (Step 000045): Train loss 3.751, Val loss 4.808\n",
            "Ep 1 (Step 000050): Train loss 3.741, Val loss 4.809\n",
            "Ep 1 (Step 000055): Train loss 3.849, Val loss 4.824\n",
            "Ep 1 (Step 000060): Train loss 3.709, Val loss 4.800\n",
            "Ep 1 (Step 000065): Train loss 3.778, Val loss 4.797\n",
            "Till this moment I never knew myself.”  “I am not be so much as you will be ” said Elizabeth,”  “I am sure you have been.” said Elizabeth, “I am sure, “I have\n",
            "Ep 2 (Step 000070): Train loss 3.701, Val loss 4.789\n",
            "Ep 2 (Step 000075): Train loss 3.839, Val loss 4.800\n",
            "Ep 2 (Step 000080): Train loss 3.784, Val loss 4.797\n",
            "Ep 2 (Step 000085): Train loss 3.851, Val loss 4.816\n",
            "Ep 2 (Step 000090): Train loss 3.782, Val loss 4.789\n",
            "Ep 2 (Step 000095): Train loss 3.791, Val loss 4.797\n",
            "Ep 2 (Step 000100): Train loss 3.797, Val loss 4.788\n",
            "Ep 2 (Step 000105): Train loss 3.825, Val loss 4.799\n",
            "Ep 2 (Step 000110): Train loss 3.750, Val loss 4.797\n",
            "Ep 2 (Step 000115): Train loss 3.679, Val loss 4.788\n",
            "Ep 2 (Step 000120): Train loss 3.647, Val loss 4.780\n",
            "Ep 2 (Step 000125): Train loss 3.632, Val loss 4.803\n",
            "Ep 2 (Step 000130): Train loss 3.610, Val loss 4.772\n",
            "Ep 2 (Step 000135): Train loss 3.798, Val loss 4.777\n",
            "Till this moment I never knew myself.”  “I have not be so much as you,” “I have no more than you know, I have been so much ”  “I am sure you know,” said Elizabeth\n",
            "Ep 3 (Step 000140): Train loss 3.823, Val loss 4.784\n",
            "Ep 3 (Step 000145): Train loss 3.620, Val loss 4.788\n",
            "Ep 3 (Step 000150): Train loss 3.753, Val loss 4.797\n",
            "Ep 3 (Step 000155): Train loss 3.516, Val loss 4.793\n",
            "Ep 3 (Step 000160): Train loss 3.626, Val loss 4.795\n",
            "Ep 3 (Step 000165): Train loss 3.483, Val loss 4.785\n",
            "Ep 3 (Step 000170): Train loss 3.585, Val loss 4.783\n",
            "Ep 3 (Step 000175): Train loss 3.572, Val loss 4.794\n",
            "Ep 3 (Step 000180): Train loss 3.738, Val loss 4.789\n",
            "Ep 3 (Step 000185): Train loss 3.685, Val loss 4.782\n",
            "Ep 3 (Step 000190): Train loss 3.597, Val loss 4.789\n",
            "Ep 3 (Step 000195): Train loss 3.577, Val loss 4.780\n",
            "Ep 3 (Step 000200): Train loss 3.645, Val loss 4.774\n",
            "Ep 3 (Step 000205): Train loss 3.569, Val loss 4.793\n",
            "Till this moment I never knew myself.”  “I have not be so much to me.” “I have not know you are not be ” “I have no more.” ”  “I have\n",
            "Ep 4 (Step 000210): Train loss 3.503, Val loss 4.778\n",
            "Ep 4 (Step 000215): Train loss 3.486, Val loss 4.776\n",
            "Ep 4 (Step 000220): Train loss 3.408, Val loss 4.792\n",
            "Ep 4 (Step 000225): Train loss 3.519, Val loss 4.774\n",
            "Ep 4 (Step 000230): Train loss 3.340, Val loss 4.795\n",
            "Ep 4 (Step 000235): Train loss 3.537, Val loss 4.800\n",
            "Ep 4 (Step 000240): Train loss 3.461, Val loss 4.810\n",
            "Ep 4 (Step 000245): Train loss 3.444, Val loss 4.798\n",
            "Ep 4 (Step 000250): Train loss 3.424, Val loss 4.785\n",
            "Ep 4 (Step 000255): Train loss 3.441, Val loss 4.806\n",
            "Ep 4 (Step 000260): Train loss 3.562, Val loss 4.771\n",
            "Ep 4 (Step 000265): Train loss 3.332, Val loss 4.780\n",
            "Ep 4 (Step 000270): Train loss 3.488, Val loss 4.794\n",
            "Ep 4 (Step 000275): Train loss 3.473, Val loss 4.796\n",
            "Till this moment I never knew myself.”  “I am not be so much to me,” said Elizabeth, “I am that, I have been so much to be in the same that you.”  “I am sure\n",
            "Ep 5 (Step 000280): Train loss 3.381, Val loss 4.810\n",
            "Ep 5 (Step 000285): Train loss 3.364, Val loss 4.806\n",
            "Ep 5 (Step 000290): Train loss 3.290, Val loss 4.822\n",
            "Ep 5 (Step 000295): Train loss 3.548, Val loss 4.813\n",
            "Ep 5 (Step 000300): Train loss 3.369, Val loss 4.819\n",
            "Ep 5 (Step 000305): Train loss 3.409, Val loss 4.810\n",
            "Ep 5 (Step 000310): Train loss 3.395, Val loss 4.818\n",
            "Ep 5 (Step 000315): Train loss 3.316, Val loss 4.817\n",
            "Ep 5 (Step 000320): Train loss 3.256, Val loss 4.795\n",
            "Ep 5 (Step 000325): Train loss 3.408, Val loss 4.799\n",
            "Ep 5 (Step 000330): Train loss 3.297, Val loss 4.803\n",
            "Ep 5 (Step 000335): Train loss 3.223, Val loss 4.783\n",
            "Ep 5 (Step 000340): Train loss 3.190, Val loss 4.798\n",
            "Till this moment I never knew myself.”  “I am not be so much to me,” said “I am sure I am sure you think it is not to be of your own family.”  “I am sure you\n",
            "Ep 6 (Step 000345): Train loss 3.347, Val loss 4.806\n",
            "Ep 6 (Step 000350): Train loss 3.291, Val loss 4.807\n",
            "Ep 6 (Step 000355): Train loss 3.187, Val loss 4.832\n",
            "Ep 6 (Step 000360): Train loss 3.157, Val loss 4.833\n",
            "Ep 6 (Step 000365): Train loss 3.323, Val loss 4.827\n",
            "Ep 6 (Step 000370): Train loss 3.199, Val loss 4.821\n",
            "Ep 6 (Step 000375): Train loss 3.275, Val loss 4.820\n",
            "Ep 6 (Step 000380): Train loss 3.161, Val loss 4.831\n",
            "Ep 6 (Step 000385): Train loss 3.262, Val loss 4.817\n",
            "Ep 6 (Step 000390): Train loss 3.305, Val loss 4.865\n",
            "Ep 6 (Step 000395): Train loss 3.302, Val loss 4.835\n",
            "Ep 6 (Step 000400): Train loss 3.272, Val loss 4.830\n",
            "Ep 6 (Step 000405): Train loss 3.167, Val loss 4.804\n",
            "Ep 6 (Step 000410): Train loss 3.161, Val loss 4.829\n",
            "Till this moment I never knew myself.”  “I am not be so much to me,” said ” said Elizabeth, “I am not know that you have been.”  “I have not.” said Elizabeth,\n",
            "Ep 7 (Step 000415): Train loss 3.194, Val loss 4.833\n",
            "Ep 7 (Step 000420): Train loss 3.103, Val loss 4.840\n",
            "Ep 7 (Step 000425): Train loss 3.094, Val loss 4.823\n",
            "Ep 7 (Step 000430): Train loss 3.201, Val loss 4.842\n",
            "Ep 7 (Step 000435): Train loss 3.122, Val loss 4.843\n",
            "Ep 7 (Step 000440): Train loss 3.069, Val loss 4.845\n",
            "Ep 7 (Step 000445): Train loss 3.177, Val loss 4.856\n",
            "Ep 7 (Step 000450): Train loss 3.174, Val loss 4.844\n",
            "Ep 7 (Step 000455): Train loss 3.114, Val loss 4.859\n",
            "Ep 7 (Step 000460): Train loss 3.116, Val loss 4.865\n",
            "Ep 7 (Step 000465): Train loss 3.138, Val loss 4.853\n",
            "Ep 7 (Step 000470): Train loss 3.057, Val loss 4.862\n",
            "Ep 7 (Step 000475): Train loss 3.108, Val loss 4.858\n",
            "Ep 7 (Step 000480): Train loss 2.981, Val loss 4.863\n",
            "Till this moment I never knew myself.”  “I am not be the same time of my dear,” said she the whole party, “I am sure I have not to be so much that you at the same time, I am sure you\n",
            "Ep 8 (Step 000485): Train loss 3.120, Val loss 4.851\n",
            "Ep 8 (Step 000490): Train loss 3.029, Val loss 4.844\n",
            "Ep 8 (Step 000495): Train loss 3.149, Val loss 4.876\n",
            "Ep 8 (Step 000500): Train loss 3.080, Val loss 4.871\n",
            "Ep 8 (Step 000505): Train loss 3.022, Val loss 4.873\n",
            "Ep 8 (Step 000510): Train loss 3.090, Val loss 4.884\n",
            "Ep 8 (Step 000515): Train loss 3.081, Val loss 4.899\n",
            "Ep 8 (Step 000520): Train loss 3.019, Val loss 4.892\n",
            "Ep 8 (Step 000525): Train loss 2.999, Val loss 4.879\n",
            "Ep 8 (Step 000530): Train loss 2.972, Val loss 4.901\n",
            "Ep 8 (Step 000535): Train loss 3.085, Val loss 4.885\n",
            "Ep 8 (Step 000540): Train loss 3.078, Val loss 4.884\n",
            "Ep 8 (Step 000545): Train loss 2.893, Val loss 4.888\n",
            "Ep 8 (Step 000550): Train loss 2.913, Val loss 4.910\n",
            "Till this moment I never knew myself.”  “I am not be the same time of the same time of the the whole of the whole party,” said Elizabeth, “I am sure, and in-room, and I am sure I have\n",
            "Ep 9 (Step 000555): Train loss 2.994, Val loss 4.893\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.ticker import MaxNLocator\n",
        "\n",
        "\n",
        "def plot_losses(epochs_seen, tokens_seen, train_losses, val_losses):\n",
        "    fig, ax1 = plt.subplots(figsize=(5, 3))\n",
        "\n",
        "    ax1.plot(epochs_seen, train_losses, label=\"Training loss\")\n",
        "    ax1.plot(epochs_seen, val_losses, linestyle=\"-.\", label=\"Validation loss\")\n",
        "    ax1.set_xlabel(\"Epochs\")\n",
        "    ax1.set_ylabel(\"Loss\")\n",
        "    ax1.legend(loc=\"upper right\")\n",
        "    ax1.xaxis.set_major_locator(MaxNLocator(integer=True))\n",
        "\n",
        "    ax2 = ax1.twiny()\n",
        "    ax2.plot(tokens_seen, train_losses, alpha=0)\n",
        "    ax2.set_xlabel(\"Tokens seen\")\n",
        "\n",
        "    fig.tight_layout()\n",
        "    plt.savefig(\"loss-plot.pdf\")\n",
        "    plt.show()\n",
        "\n",
        "epochs_tensor = torch.linspace(0, num_epochs, len(train_losses))\n",
        "plot_losses(epochs_tensor, tokens_seen, train_losses, val_losses)"
      ],
      "metadata": {
        "id": "Op9B42meYOpp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 307
        },
        "outputId": "4b4080cd-9ab7-45e3-b2b8-c8d052fd30c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x300 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "[Project Report](https://docs.google.com/document/d/1UqfgtdQqA9AewWvyHaNXvG0HvkHNGtRCjWaOyI6fWJ8/edit?usp=sharing)"
      ],
      "metadata": {
        "id": "RgPq3Zsax4Az"
      }
    }
  ]
}